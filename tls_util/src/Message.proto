syntax = "proto3";

package tls;

enum Message_Type {
    // Application data messages
    DATA = 0;
    CLOSE = 1;

    //Handshake messages
    CLIENT_HELLO = 2;
    SERVER_HELLO = 3;
    CERTIFICATE = 4;
    SERVER_HELLO_DONE = 5;
    CLIENT_KEY_EXCHANGE = 6;
    CHANGE_CIPHER_SPEC = 7;
    FINISHED = 8;
    ABORT = 9;

    // Ping messages
    PING = 10;
    PING_RESPONSE = 11;
}

enum Finished_Type {
    CLIENT_FINISHED = 0;
    SERVER_FINISHED = 1;
}


message Message_Wrapper {
    Message_Type type = 1;

    message Application_Data {
        uint32 size = 2;
        string data = 3;
    }

    optional Application_Data application_data = 2;


    message Close {
    }

    optional Close close = 3;


    message Client_Hello {
    }

    optional Client_Hello client_hello = 4;


    message Server_Hello {
        int32 prime_group = 2;
    }

    optional Server_Hello server_hello = 5;


    message Certificate {
        string public_key = 2;
    }

    optional Certificate certificate = 6;


    message Server_Hello_Done {
    }

    optional Server_Hello_Done server_hello_done = 7;


    message Client_Key_Exchange {
        string public_key = 2;
    }

    optional Client_Key_Exchange client_key_exchange = 8;


    message Change_Cipher_Spec {
    }

    optional Change_Cipher_Spec change_cipher_spec = 9;


    message Finished {
        Finished_Type party = 1;
        uint32 size = 2;
        string protocol = 3;
    }

    optional Finished finished = 10;


    message  Abort {
    }

    optional Abort abort = 11;


    message Ping {
    }

    optional Ping ping = 12;

    
    message Ping_Response {
    }
    
    optional Ping_Response ping_response = 13;
}