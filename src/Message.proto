syntax = "proto3";

package tls;

enum MessageType {
    // Application data messages
    DATA = 0;
    CLOSE = 1;

    //Handshake messages
    CLIENT_HELLO = 2;
    SERVER_HELLO = 3;
    CERTIFICATE = 4;
    SERVER_HELLO_DONE = 5;
    CLIENT_KEY_EXCHANGE = 6;
    CHANGE_CIPHER_SPEC = 7;
    FINISHED = 8;
    ABORT = 9;
}

enum FinishedType {
    CLIENT_FINISHED = 0;
    SERVER_FINISHED = 1;
}


message MessageWrapper {
    MessageType type = 1;

    message ApplicationData {
        uint32 size = 2;
        string data = 3;
    }

    optional ApplicationData application_data = 2;


    message Close {
    }

    optional Close close = 3;


    message ClientHello {
    }

    optional ClientHello client_hello = 4;


    message ServerHello {
        int32 prime_group = 2;
    }

    optional ServerHello server_hello = 5;


    message Certificate {
        string public_key = 2;
    }

    optional Certificate certificate = 6;


    message ServerHelloDone {
    }

    optional ServerHelloDone server_hello_done = 7;


    message ClientKeyExchange {
        string public_key = 2;
    }

    optional ClientKeyExchange client_key_exchange = 8;


    message ChangeCipherSpec {
    }

    optional ChangeCipherSpec change_cipher_spec = 9;


    message Finished {
        FinishedType party = 2;
        string protocol = 3;
    }

    optional Finished finished = 10;


    message  Abort {
    }

    optional Abort abort = 11;
}